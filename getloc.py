#!/usr/bin/python3
# coding: utf-8

'''
query players.db to find location coordinates
'''

import sqlite3
import sys
import math
import os
import myutil
from common import dist


SQLX = "cast(round(x) as int) as x"
SQLY = "cast(round(y) as int) as y"
RANGE = 80
ADD_QUOTE = False

class Solution():
    ''' sqlite and query '''

    def __init__(self):
        # get save dir from config.json
        self.jsondata = myutil.read_jsonfile('config.json')
        # full path to players.db
        self.playerdb = os.path.join(self.get_path(), 'players.db')
        self.check_path(self.playerdb)
        # full path to vehicles.db
        self.vehicledb = os.path.join(self.get_path(), 'vehicles.db')
        self.check_path(self.vehicledb)
        self.vehicletxt = '_vehicle.py'
        self.playerx = 0
        self.playery = 0
        self.vehicles = []

    @staticmethod
    def check_path(fn):
        ''' check path '''
        if not myutil.isfile(fn):
            print("file not found: ", fn)
            sys.exit(1)

    def get_path(self):
        ''' get path by platform'''
        if myutil.is_linux():
            return self.jsondata.get('path')
        if myutil.is_cygwin():
            return self.jsondata.get('cygwin_path')
        if myutil.is_windows():
            return self.jsondata.get('window_path')

    def query_xy(self):
        ''' query x, y location '''
        conn = sqlite3.connect(self.playerdb)
        sql = f'SELECT name, {SQLX}, {SQLY} FROM localPlayers'
        res = conn.execute(sql)
        (name, x, y) = res.fetchone()
        self.playerx = x
        self.playery = y
        print(f'player name: {name} at location: {x}x{y}')
        url = dist.url(x, y)
        print(f'refer to online map: {url}')

    def dump_vehicles(self):
        ''' query all location of vehicles '''
        conn = sqlite3.connect(self.vehicledb)
        cursor = conn.cursor()
        sql = f"SELECT {SQLX}, {SQLY} FROM vehicles"
        cursor.execute(sql)
        records = cursor.fetchall()

        cnt = 0
        with open(self.vehicletxt, "wt", encoding='utf-8') as f:
            print("# generated by getloc.py...", file=f)
            print("_VEHICLES = [", file=f)
            all_vehicles = {}
            # transfer all queried result into all_vehicles
            for row in records:
                d = int(dist.dist(0, 0, row[0], row[1]))
                self.vehicles.append((row[0], row[1]))
                all_vehicles[d] = row
                cnt += 1
            # dump all_vehicles to file, sort by the distance
            # to original point (0, 0). Thus it can promise the output
            # will be the same cross platform
            for k in sorted(all_vehicles.keys()):
                v = all_vehicles[k]
                ln = f'({v[0]}, {v[1]}),'
                print(ln, file=f)
            print("]", file=f)
        print(f'dump {cnt} vehicles to {self.vehicletxt}')

    def find_nearby_vehicles(self):
        ''' find nearby vehicles, only in the range will be displayed '''
        print(f'find_nearby_vehicles (range={RANGE}):')
        print('dist', 'x,y', 'url')
        found = {}
        for v in self.vehicles:
            d = dist.dist(self.playerx, self.playery, v[0], v[1])
            d = int(d)
            if d < RANGE:
                found[d] = v
        # display by near to far
        for k in sorted(found.keys()):
            v = found[k]
            url = dist.urlp(v)
            if ADD_QUOTE:
                print(f'"{k}", "{v}", "{url}"')
            else:
                print(f'{k}, {v}, {url}')

    def run(self):
        ''' run '''
        self.query_xy()
        self.dump_vehicles()
        self.find_nearby_vehicles()

def main():
    ''' main '''
    sol = Solution()
    sol.run()

if __name__ == '__main__':
    main()
